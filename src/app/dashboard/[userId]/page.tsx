'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useParams } from 'next/navigation';

interface User {
  id: number;
  username: string;
  created_at: string;
}

interface UserStats {
  total_answered: number;
  correct_answers: number;
  unique_tests_answered: number;
  accuracy: string;
  sectionStats: Array<{
    section: string;
    total_answered: number;
    correct_answers: number;
  }>;
}

export default function Dashboard() {
  const params = useParams();
  const userId = params.userId as string;
  
  const [user, setUser] = useState<User | null>(null);
  const [stats, setStats] = useState<UserStats | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (userId) {
      fetchUserData();
    }
  }, [userId]);

  const fetchUserData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResponse = await fetch(`/api/users`);
      const users = await userResponse.json();
      const currentUser = users.find((u: User) => u.id === parseInt(userId));
      setUser(currentUser || null);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResponse = await fetch(`/api/results?userId=${userId}&type=stats`);
      const statsData = await statsResponse.json();
      setStats(statsData);
    } catch (error) {
      console.error('Failed to fetch user data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h1>
          <Link href="/" className="text-blue-600 hover:underline">
            –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-800">
                –î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {user.username}!
              </h1>
              <p className="text-gray-600 mt-2">
                –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ {new Date(user.created_at).toLocaleDateString('uk-UA')}
              </p>
            </div>
            <Link
              href="/"
              className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors"
            >
              –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </Link>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          {stats && (
            <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
              
              <div className="grid md:grid-cols-4 gap-4 mb-6">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{stats.total_answered}</div>
                  <div className="text-sm text-gray-600">–í—Å—å–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">{stats.correct_answers}</div>
                  <div className="text-sm text-gray-600">–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">{stats.unique_tests_answered}</div>
                  <div className="text-sm text-gray-600">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤</div>
                </div>
                <div className="bg-orange-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-orange-600">{stats.accuracy}%</div>
                  <div className="text-sm text-gray-600">–¢–æ—á–Ω—ñ—Å—Ç—å</div>
                </div>
              </div>

              {stats.sectionStats.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-3">–ü–æ —Ä–æ–∑–¥—ñ–ª–∞—Ö:</h3>
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
                    {stats.sectionStats.map((section, index) => (
                      <div key={index} className="border border-gray-200 p-3 rounded-lg">
                        <div className="font-medium text-gray-800 mb-1">{section.section}</div>
                        <div className="text-sm text-gray-600">
                          {section.correct_answers}/{section.total_answered} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö
                          ({section.total_answered > 0 ? Math.round(section.correct_answers / section.total_answered * 100) : 0}%)
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è */}
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Link
              href={`/tests/${userId}`}
              className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
            >
              <div className="text-3xl mb-4">üìù</div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏</h3>
              <p className="text-gray-600">–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —Ç–∞ –ø—Ä–æ–π–¥—ñ—Ç—å —Ç–µ—Å—Ç–∏</p>
            </Link>

            <Link
              href={`/add-tests/${userId}`}
              className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
            >
              <div className="text-3xl mb-4">‚ûï</div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">–î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–∏</h3>
              <p className="text-gray-600">–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —Ç–µ—Å—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É</p>
            </Link>

            <Link
              href={`/results/${userId}`}
              className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
            >
              <div className="text-3xl mb-4">üìä</div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏</h3>
              <p className="text-gray-600">–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</p>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
} 